import java.io.FileInputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.Marshaller;
import java.io.FileOutputStream;

// import java content classes generated by binding compiler
import csc.fresher.java.*;

public class Main {
       
    public static void main( String[] args ) {
        try {
            // create a JAXBContext capable of handling classes generated into
            // the primer.po package
            JAXBContext jc = JAXBContext.newInstance( "csc.fresher.java" );
            
            // create an Unmarshaller
            Unmarshaller u = jc.createUnmarshaller();
            
            // unmarshal a po instance document into a tree of Java content
            // objects composed of classes from the primer.po package.
            JAXBElement<?> poElement = 
		(JAXBElement<?>)u.unmarshal( new FileInputStream( "Excercise_3.xml" ) );
            CompanyType po = (CompanyType)poElement.getValue();
                
	    
            // examine some of the content in the PurchaseOrder
            System.out.println( "Company's Address: " );
            
            // display the shipping address
            USAddress address = po.getAddress();
            displayAddress( address );
            
            // display the employees
            EmployeesType items = po.getEmployees();
            displayEmployees( items );
			
			//remove last employee in xml file
            removeLastEmployee(items);
            Marshaller m = jc.createMarshaller();
			m.marshal(poElement, new FileOutputStream("C:\\Excercise_3\\Excercise_3_Result.xml"));
            
        } catch( JAXBException je ) {
            je.printStackTrace();
        } catch( IOException ioe ) {
            ioe.printStackTrace();
        }
    }
    
    public static void displayAddress( USAddress address ) {
        // display the address
        System.out.println( "\t" + address.getName() );
        System.out.println( "\t" + address.getStreet() ); 
        System.out.println( "\t" + address.getCity() +
                            ", " + address.getState() + 
                            " "  + address.getZip() ); 
        System.out.println( "\t" + address.getCountry() + "\n"); 
    }
    
    public static void displayEmployees( EmployeesType items ) {
        List itemTypeList = items.getEmployee();
                
        // iterate over List
        for( Iterator iter = itemTypeList.iterator(); iter.hasNext(); ) {
            EmployeesType.Employee item = (EmployeesType.Employee)iter.next(); 
            System.out.println( "\t" + item.getFullName() +
                                " has " + item.getYearsOfExperience() + " years of experience" );
        }
    }
	
	public static void removeLastEmployee( EmployeesType items ) {
		
		List itemTypeList = items.getEmployee();
		System.out.println("Size before remove last item: " + itemTypeList.size());
		itemTypeList.remove(itemTypeList.size()-1);		
		System.out.println("Size after remove last item: " + itemTypeList.size());
		
	}
}
